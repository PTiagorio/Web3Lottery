{"ast":null,"code":"var _jsxFileName = \"/Users/tiagoferreira/Desktop/web3-lottery/front-end/src/util/interact.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nrequire('dotenv').config();\n\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\n\nconst {\n  createAlchemyWeb3\n} = require(\"@alch/alchemy-web3\");\n\nconst web3 = createAlchemyWeb3(alchemyKey);\n\nconst contractABI = require(\"../contract-abi.json\");\n\nconst contractAddress = \"0x928D2Dc6E18b72EcCFfa3Eb48d56c8D66C86db74\";\nexport const lotteryContract = new web3.eth.Contract(contractABI.abi, contractAddress);\nexport const loadCurrentLottery = async () => {\n  const lottery = await lotteryContract.methods.Lottery().call();\n  return lottery;\n};\nexport const connectWallet = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      const obj = {\n        address: addressArray[0]\n      };\n      return obj;\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"ğŸ˜¥ \" + err.message\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\" \", \"\\uD83E\\uDD8A\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n            target: \"_blank\",\n            href: `https://metamask.io/download`,\n            children: \"You must install Metamask, a virtual Ethereum wallet, in your browser.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }, this)\n    };\n  }\n};\nexport const getCurrentWalletConnected = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_accounts\"\n      });\n\n      if (addressArray.length > 0) {\n        return {\n          address: addressArray[0]\n        };\n      } else {\n        return {\n          address: \"\",\n          status: \"ğŸ¦Š Connect to Metamask using the top right button.\"\n        };\n      }\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"ğŸ˜¥ \" + err.message\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\" \", \"\\uD83E\\uDD8A\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n            target: \"_blank\",\n            href: `https://metamask.io/download`,\n            children: \"You must install Metamask, a virtual Ethereum wallet, in your browser.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }, this)\n    };\n  }\n};\nexport const updateMessage = async (address, message) => {};","map":{"version":3,"sources":["/Users/tiagoferreira/Desktop/web3-lottery/front-end/src/util/interact.js"],"names":["require","config","alchemyKey","process","env","REACT_APP_ALCHEMY_KEY","createAlchemyWeb3","web3","contractABI","contractAddress","lotteryContract","eth","Contract","abi","loadCurrentLottery","lottery","methods","Lottery","call","connectWallet","window","ethereum","addressArray","request","method","obj","address","err","status","message","getCurrentWalletConnected","length","updateMessage"],"mappings":"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","sourcesContent":["require('dotenv').config();\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\nconst web3 = createAlchemyWeb3(alchemyKey); \n\nconst contractABI = require(\"../contract-abi.json\");\nconst contractAddress = \"0x928D2Dc6E18b72EcCFfa3Eb48d56c8D66C86db74\";\n\nexport const lotteryContract = new web3.eth.Contract(\n    contractABI.abi,\n    contractAddress\n);\n\nexport const loadCurrentLottery = async () => { \n    const lottery = await lotteryContract.methods.Lottery().call();\n    return lottery;\n};\n\nexport const connectWallet = async () => {\n    if (window.ethereum) {\n        try {\n        const addressArray = await window.ethereum.request({\n            method: \"eth_requestAccounts\",\n        });\n        const obj = {\n            address: addressArray[0],\n        };\n        return obj;\n        } catch (err) {\n        return {\n            address: \"\",\n            status: \"ğŸ˜¥ \" + err.message,\n        };\n        }\n    } else {\n        return {\n        address: \"\",\n        status: (\n            <span>\n            <p>\n                {\" \"}\n                ğŸ¦Š{\" \"}\n                <a target=\"_blank\" href={`https://metamask.io/download`}>\n                You must install Metamask, a virtual Ethereum wallet, in your\n                browser.\n                </a>\n            </p>\n            </span>\n        ),\n        };\n    }\n};\n\nexport const getCurrentWalletConnected = async () => {\n    if (window.ethereum) {\n        try {\n        const addressArray = await window.ethereum.request({\n            method: \"eth_accounts\",\n        });\n        if (addressArray.length > 0) {\n            return {\n            address: addressArray[0],\n            };\n        } else {\n            return {\n            address: \"\",\n            status: \"ğŸ¦Š Connect to Metamask using the top right button.\",\n            };\n        }\n        } catch (err) {\n        return {\n            address: \"\",\n            status: \"ğŸ˜¥ \" + err.message,\n        };\n        }\n    } else {\n        return {\n        address: \"\",\n        status: (\n            <span>\n            <p>\n                {\" \"}\n                ğŸ¦Š{\" \"}\n                <a target=\"_blank\" href={`https://metamask.io/download`}>\n                You must install Metamask, a virtual Ethereum wallet, in your\n                browser.\n                </a>\n            </p>\n            </span>\n        ),\n        };\n    }\n};\n\nexport const updateMessage = async (address, message) => {\n  \n};"]},"metadata":{},"sourceType":"module"}